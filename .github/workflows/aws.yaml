# 이 워크플로우는 Amazon ECR에 새 컨테이너 이미지를 빌드하고 푸시하며, 
# 메인 브랜치에 푸시될 때 Amazon ECS에 새 작업 정의를 배포합니다.
#
# 이 워크플로우를 사용하려면 다음 설정 단계를 완료해야 합니다:
#
# 1. 이미지를 저장할 ECR 리포지토리를 생성하세요.
#    예: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    아래 워크플로우에서 `ECR_REPOSITORY` 환경 변수의 값을 리포지토리 이름으로 바꾸세요.
#    `AWS_REGION` 환경 변수의 값을 리포지토리의 리전으로 바꾸세요.
#
# 2. ECS 작업 정의, ECS 클러스터 및 ECS 서비스를 생성하세요.
#    예: ECS 콘솔의 시작 가이드 참조:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    아래 워크플로우에서 `ECS_SERVICE` 환경 변수의 값을 Amazon ECS 서비스 이름으로 바꾸세요.
#    `ECS_CLUSTER` 환경 변수의 값을 클러스터 이름으로 바꾸세요.
#
# 3. ECS 작업 정의를 JSON 파일로 리포지토리에 저장하세요.
#    형식은 `aws ecs register-task-definition --generate-cli-skeleton` 명령어의 출력 결과와 같아야 합니다.
#    아래 워크플로우에서 `ECS_TASK_DEFINITION` 환경 변수의 값을 JSON 파일 경로로 바꾸세요.
#    `CONTAINER_NAME` 환경 변수의 값을 작업 정의의 `containerDefinitions` 섹션에 있는 컨테이너 이름으로 바꾸세요.
#
# 4. IAM 사용자 액세스 키를 GitHub Actions 비밀 변수에 저장하세요: 
#    `AWS_ACCESS_KEY_ID` 및 `AWS_SECRET_ACCESS_KEY`.
#    사용된 각 액션의 권장 IAM 정책 및 액세스 키 자격 증명을 안전하게 관리하는 방법은 관련 문서를 참조하세요.

name: AWS ECR에 이미지 빌드 및 푸시

on:
  push:
    branches:
      - feature/release-test

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                   # 선호하는 AWS 리전으로 설정하세요. 예: us-west-1
  FRONTEND_ECR_NAME: ${{ secrets.FRONTEND_ECR_NAME }}          # Amazon ECR 리포지토리 이름으로 설정하세요.
  BACKEND_ECR_NAME: ${{ secrets.BACKEND_ECR_NAME }}          # Amazon ECR 리포지토리 이름으로 설정하세요.
#  ECS_SERVICE: MY_ECS_SERVICE                 # Amazon ECS 서비스 이름으로 설정하세요.
#  ECS_CLUSTER: MY_ECS_CLUSTER                 # Amazon ECS 클러스터 이름으로 설정하세요.
#  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # Amazon ECS 작업 정의 파일 경로로 설정하세요. 
#                                               # 예: .aws/task-definition.json
#  CONTAINER_NAME: MY_CONTAINER_NAME           # 작업 정의의 containerDefinitions 섹션에 있는 컨테이너 이름으로 설정하세요.

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }} # 메인 브랜치에 푸시될 때 프로덕션 환경으로 배포 그 외에는 테스트 환경으로 배포
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: AWS 자격 증명 구성
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Amazon ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 프론트엔드 환경 변수 설정
        run: |
          touch ./frontend/.env
          echo "${{ secrets.FRONTEND_SECRET }}" >> ./frontend/.env

      - name: 이미지 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "${{ github.sha }}"
        run: |
          echo "📦 ${{ matrix.service }} 이미지 빌드 및 푸시 시작"
          if [ "$matrix.service" == "frontend" ]; then
            echo "$ECR_REGISTRY/$FRONTEND_ECR_NAME:$IMAGE_TAG"
            docker build -t $ECR_REGISTRY/$FRONTEND_ECR_NAME:$IMAGE_TAG -f ./${{ matrix.service }}/Dockerfile ./${{ matrix.service }}
            docker push $ECR_REGISTRY/$FRONTEND_ECR_NAME:$IMAGE_TAG
          else
            echo "$ECR_REGISTRY/$BACKEND_ECR_NAME:$IMAGE_TAG"
            docker build -t $ECR_REGISTRY/$BACKEND_ECR_NAME:$IMAGE_TAG -f ./${{ matrix.service }}/Dockerfile ./${{ matrix.service }}
            docker push $ECR_REGISTRY/$BACKEND_ECR_NAME:$IMAGE_TAG
          fi
          echo "📦 ${{ matrix.service }} 이미지 빌드 및 푸시 완료"

#    - name: Amazon ECS 작업 정의에 새 이미지 ID 입력
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Amazon ECS 작업 정의 배포
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true