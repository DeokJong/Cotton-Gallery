name: AWS ECR에 이미지 빌드 및 푸시

on:
  push:
    branches:
      - feature/release-test

env:
  AWS_REGION: ap-northeast-2                   # 선호하는 AWS 리전으로 설정하세요. 예: us-west-1
  ECR_REPOSITORY: jbnu-shopping/image          # Amazon ECR 리포지토리 이름으로 설정하세요.
  BACKEND_DOCKERFILE_PATH: ./backend/Dockerfile # 백엔드 Dockerfile 경로
  BACKEND_BUILD_CONTEXT: ./backend             # 백엔드 빌드 컨텍스트
  FRONTEND_DOCKERFILE_PATH: ./frontend/Dockerfile # 프론트엔드 Dockerfile 경로
  FRONTEND_BUILD_CONTEXT: ./frontend           # 프론트엔드 빌드 컨텍스트

#  ECS_SERVICE: MY_ECS_SERVICE                 # Amazon ECS 서비스 이름으로 설정하세요.
#  ECS_CLUSTER: MY_ECS_CLUSTER                 # Amazon ECS 클러스터 이름으로 설정하세요.
#  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # Amazon ECS 작업 정의 파일 경로로 설정하세요. 
#                                               # 예: .aws/task-definition.json
#  CONTAINER_NAME: MY_CONTAINER_NAME           # 작업 정의의 containerDefinitions 섹션에 있는 컨테이너 이름으로 설정하세요.

jobs:
  deploy:
    name: 배포
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v2

    - name: AWS 자격 증명 구성
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Amazon ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker Buildx 활성화
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: image=moby/buildkit:latest

    - name: Docker 캐시 유효성 검사 - 백엔드
      run: |
        echo "📦 Docker 백엔드 캐시 레이어 유효성 검사"
        if ! docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:backend-cache > /dev/null 2>&1; then
          echo "⚠️ 백엔드 캐시 레이어가 존재하지 않아 새로 생성합니다."
          docker buildx build \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:backend-cache,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:backend-init-cache \
            --push -f ${{ env.BACKEND_DOCKERFILE_PATH }} ${{ env.BACKEND_BUILD_CONTEXT }}
          echo "🚀 백엔드 캐시 레이어 생성 완료"
        else
          echo "✅ 기존 백엔드 캐시 레이어 발견, 캐시 사용 준비 완료"
        fi

    - name: Docker 캐시 유효성 검사 - 프론트엔드
      run: |
        echo "📦 Docker 프론트엔드 캐시 레이어 유효성 검사"
        if ! docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:frontend-cache > /dev/null 2>&1; then
          echo "⚠️ 프론트엔드 캐시 레이어가 존재하지 않아 새로 생성합니다."
          docker buildx build \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:frontend-cache,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:frontend-init-cache \
            --push -f ${{ env.FRONTEND_DOCKERFILE_PATH }} ${{ env.FRONTEND_BUILD_CONTEXT }}
          echo "🚀 프론트엔드 캐시 레이어 생성 완료"
        else
          echo "✅ 기존 프론트엔드 캐시 레이어 발견, 캐시 사용 준비 완료"
        fi

    - name: Amazon ECR에 백엔드 이미지 빌드, 태그 지정 및 푸시
      id: build-backend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BACKEND_IMAGE_TAG: "${{ github.sha }}-backend"
      run: |
        echo "📦 백엔드 이미지 빌드 및 푸시 시작"
        docker buildx build \
        --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:backend-cache \
        --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:backend-cache,mode=max \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG \
        -f ${{ env.BACKEND_DOCKERFILE_PATH }} ${{ env.BACKEND_BUILD_CONTEXT }} --push
        echo "🚀 백엔드 이미지 빌드 및 푸시 완료"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG"

    - name: Amazon ECR에 프론트엔드 이미지 빌드, 태그 지정 및 푸시
      id: build-frontend-image
      env:  
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        FRONTEND_IMAGE_TAG: "${{ github.sha }}-frontend"
      run: |
        echo "📦 프론트엔드 이미지 빌드 및 푸시 시작"
        docker buildx build \
        --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:frontend-cache \
        --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:frontend-cache,mode=max \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG \
        -f ${{ env.FRONTEND_DOCKERFILE_PATH }} ${{ env.FRONTEND_BUILD_CONTEXT }} --push
        echo "🚀 프론트엔드 이미지 빌드 및 푸시 완료"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG"

#    - name: Amazon ECS 작업 정의에 새 이미지 ID 입력
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Amazon ECS 작업 정의 배포
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
